; Hyperbolic quantifiers model with priors for 10 cookies

(define total 10)
(define (state-prior) (multinomial states 
                                   '(0.136596628991561 0.234800397501382 
                                                       0.175333704811396 0.119079140744304 
                                                       0.0905231452868464 0.0592942210014143 
                                                       0.0490814527044804 0.0416087561571736 
                                                       0.0357562550804486 0.0321055890149093 
                                                       0.0258207087061082)))
; Hallucinated priors (3, 8, 10 are real), don't take seriously

(define affect-prior (list 
                      '(0 0.12333333333333) 
                      '(1 0.1390625) 
                      '(2 0.244230769230769) 
                      '(3 0.4875) 
                      '(4 0.507142857142857) 
                      '(5 0.550625) 
                      '(6 0.592857142857143) 
                      '(7 0.630769230769231) 
                      '(8 0.6833) 
                      '(9 0.70) 
                      '(10 0.7406) ))
(define depth 1)
(define hardness 1)

(define goals 
  (list 'how-many
        'affect 
        ;'how-many-and-affect
        ))

(define (goal-prior) (uniform-draw goals))

(define states (list '0 '1 '2 '3 '4 '5 '6 '7 '8 '9 '10))

(define utterances (list 'some 'all))

(define (utterance-prior) (uniform-draw utterances))

(define affects (list '0 '1))

(define (sample-affect state prior)
  (let ((current-state-affect-pair (first prior)))
    (if (equal? state (first current-state-affect-pair))
        (if (flip (second current-state-affect-pair))
            '1
            '0)
        (sample-affect state (rest prior)))))


(define (literal-interpretation utterance state)
  (case utterance
        (('all) (equal? state '10))
        (('some) (if (equal? total '10) (> state 0) #t))
        ))

(define (goal-satisfied? goal listener-state-affect-pair speaker-state speaker-affect)
  (case goal
    (('how-many-and-affect) (and (equal? (first listener-state-affect-pair) speaker-state)
                               (equal? (second listener-state-affect-pair) speaker-affect)))
    (('how-many) (equal? (first listener-state-affect-pair) speaker-state))
    (('affect) (equal? (second listener-state-affect-pair) speaker-affect))))


(define speaker
  (mem (lambda (state affect goal depth)
  (enumeration-query
   (define utterance (utterance-prior))
   utterance
    (goal-satisfied? goal (apply multinomial (listener utterance depth)) state affect)
   ))))

(define listener
  (mem (lambda (utterance depth)
  (enumeration-query
   (define state (state-prior))
   (define affect (sample-affect state affect-prior))
   (define speaker-goal (goal-prior))
   
   (list state affect)

   (if (equal? depth 0)
       (literal-interpretation utterance state)
       (equal? utterance
               (apply multinomial (speaker state affect speaker-goal (- depth 1)))))
   ))))

(define (interpret utterance) 
  (listener utterance depth))

(list (interpret 'some) (interpret 'all))
