(define depth 1)
(define hardness 1)

(define goals 
  (list 'state-and-affect 
        'just-state  
        'just-affect))

(define (goal-prior) (multinomial goals '(0.33 0.33 0.33)))

(define states (list '0 '1 '2 '3 '4 '5 '6 '7 '8 '9 '10))

(define utterances (list 'some 'all))

(define (utterance-prior) (multinomial utterances '(0.5 0.5)))

(define affects (list '0 '1))

(define (sample-affect state prior)
  (let ((current-state-affect-pair (first prior)))
    (if (equal? state (first current-state-affect-pair))
        (if (flip (second current-state-affect-pair))
            '1
            '0)
        (sample-affect state (rest prior)))))


(define (literal-interpretation utterance state)
  ; if utterance is "all"
  (if (equal? utterance 'all)
    ; return true if eaten state is '10
      (equal? state '10)
  ; else if utterance is "some"
    ; if total quantity is 10
      (if (equal? total '10)
        ; return true if eaten state is not '0 (not "none")
        (not (equal? state '0))
        ; else return true (because there is no "none" state when the total quantity is 100)
        (equal? state state))
      )
  )

(define (goal-satisfied? goal listener-state-affect-pair speaker-state speaker-affect)
  (case goal
    (('state-and-affect) (and (equal? (first listener-state-affect-pair) speaker-state)
                               (equal? (second listener-state-affect-pair) speaker-affect)))
    (('just-state) (equal? (first listener-state-affect-pair) speaker-state))
    (('just-affect) (equal? (second listener-state-affect-pair) speaker-affect))))


;; The model is currently restricted to hardness=1
(define speaker
  (mem (lambda (state affect goal depth)
  (enumeration-query
   (define utterance (utterance-prior))
   utterance
    (goal-satisfied? goal (apply multinomial (listener utterance depth)) state affect)
   ))))

(define listener
  (mem (lambda (utterance depth)
  (enumeration-query
   (define state (state-prior))
   (define affect (sample-affect state affect-prior))
   (define speaker-goal (goal-prior))
   
   (list state affect)

   (if (equal? depth 0)
       (literal-interpretation utterance state)
       (equal? utterance
               (apply multinomial (speaker state affect speaker-goal (- depth 1)))))
   ))))

(define (sample-one utterance) 
  (listener utterance depth))

(list (sample-one 'some) (sample-one 'all))

;(sample-one 'all)